#include <LiquidCrystal_I2C.h>
LiquidCrystal_I2C lcd(0x27, 20, 4);
// ------------------------------- //
#include <Keypad.h>
const byte numRows= 4;          
const byte numCols= 4;         
char keymap[numRows][numCols]= 
{
{'1', '2', '3', 'A'}, 
{'4', '5', '6', 'B'}, 
{'7', '8', '9', 'C'},
{'*', '0', '#', 'D'}
};
char keypressed;         
char code[]= {'2','0','2','4'}; 
char exp_code[]= {'2','0','2','4','0','2','0','2'};
char code_buff1[sizeof(code)]; 
char code_buff2[sizeof(code)]; 
short a=0,i=0,s=0,j=0;       
byte rowPins[numRows] = {6, 7, 8, 9};  
byte colPins[numCols]= {10, 11, 12, 13};
Keypad myKeypad= Keypad(makeKeymap(keymap), rowPins, colPins, numRows, numCols);
// ------------------------------- //
int trialcheck;
// ------------------------------- //
#include <Adafruit_Fingerprint.h>
#define en_sw  4
#define ver_sw 5
#define bz     22
#define capture 3
bool ch_status=false,flag_check=true;
int getFingerprintIDez();
// ------------------------------------ //
#include<String.h>
String Answer = "\0";
// ------------------------------------- //
#include <Servo.h>
Servo myservo;  
int pos = 0;

void beep(int t){
   for(int si =0 ; si <t ; si++ ){
      digitalWrite(bz,1);delay(500); 
      digitalWrite(bz,0);delay(200);     
    }
}
void setup(){
pinMode(en_sw,INPUT_PULLUP);
pinMode(ver_sw,INPUT_PULLUP);   
pinMode(bz,OUTPUT);digitalWrite(bz,0);
pinMode(capture,OUTPUT);digitalWrite(capture,1);;
Serial.begin(9600);
Serial2.begin(9600);
lcd.begin();
lcd.backlight();
 lcd.setCursor(6, 0);lcd.print(F("WELCOME"));
 lcd.setCursor(0, 1);lcd.print(F(" .................. "));
 lcd.setCursor(0, 2);lcd.print(F(" "));
 lcd.setCursor(0, 3);lcd.print(F(" "));
  while (!Serial);  // For Yun/Leo/Micro/Zero/...
  delay(100);
  Serial.println("\n\nAdafruit Fingerprint sensor enrollment & Verify");
  if (finger.verifyPassword()) {
    Serial.println("Found fingerprint sensor!");
    lcd.clear();
    lcd.setCursor(0,0);lcd.print(F("FOUND FP SENSOR!"));
    delay(1000);
  } else {
    Serial.println(F("Did not find fingerprint sensor :("));
    lcd.clear();
    lcd.setCursor(0,0);lcd.print(F("FP SENSOR  "));
    lcd.setCursor(0,1);lcd.print(F("      NOT FOUND!"));
    delay(1000);
    while (1) { delay(1); }
  }
  myservo.attach(44);  
  myservo.write(pos);
  delay(1000);
  lcd.clear();
  }

void lcd_msg(){
  delay(1000);
  lcd.clear();
  lcd.setCursor(0,0);lcd.print(F("PASSWORD & BIOMETRIC"));
  lcd.setCursor(0,1);lcd.print(F("SECURITY SYSTEM     "));
  digitalWrite(capture,1);;
}

void loop(){
while(trialcheck == 3){
  lcd.setCursor(0,0);lcd.print(F("END OF TRIALS   "));
  lcd.setCursor(0,1);lcd.print(F("SYSTEM IS LOCKED"));
  Serial.println(F("END OF TRIALS, SYSTEM IS LOCKED"));
}
while(trialcheck<3){
  digitalWrite(capture,1);;
  keypressed = myKeypad.getKey();            
  if(keypressed == '*'){        
  lcd.clear();
  lcd.setCursor(0,0);lcd.print("ENTER PASSWORD:");        
  password();                             
  if(a==sizeof(code)) {                
    Serial.println(F("Proceed With FP"));
    trialcheck = 0;digitalWrite(capture,1);;
    biometric_check();}  
  else{
    trialcheck++;Serial.println(trialcheck);
    lcd.clear();
    lcd.setCursor(0,0);lcd.print(F("ACCESS DENIED")); 
    lcd.setCursor(0,1);lcd.print(F("CAPTURE IMAGE")); 
    beep(3);digitalWrite(capture,0);
    delay(1000);
    lcd.clear(); 
    lcd.setCursor(0,0);lcd.print(F("WRONG PASSWORD")); 
    lcd.setCursor(0,1);lcd.print(F("PLS TRY AGAIN!"));
    }
    lcd_msg();
  }
  else if(keypressed == 'A'){
    lcd.clear();
    lcd.setCursor(0,0);lcd.print(F("ENTER EXCEPTION PSWD"));
    exception_password();digitalWrite(capture,1);;
    if(a==sizeof(exp_code)) { 
    Serial.println(F("Exception Password Success"));
    trialcheck = 0;
     lcd.setCursor(0,0);lcd.print(F("EXCEPTION CODE VALID"));          
     lcd.setCursor(0,1);lcd.print(F("UNLOCK SUCCESS "));     
     serv_act();
     lcd_msg();break;
    }
    else{
    trialcheck++;Serial.println(trialcheck);
    lcd.clear();
    lcd.setCursor(0,0);lcd.print(F("EXCEPTION,          ")); 
    lcd.setCursor(0,1);lcd.print(F("ACCESS DENIED")); 
    lcd.setCursor(0,2);lcd.print(F("CAPTURE IMAGE")); 
    beep(3);digitalWrite(capture,0);
    lcd.clear(); 
    lcd.setCursor(0,0);lcd.print(F("WRONG PASSWORD  "));          
    lcd.setCursor(0,1);lcd.print(F("PLS TRY AGAIN!  "));
    lcd_msg();
    }
   }
// -------- ENROLL CHECK ---------- //
  if(digitalRead(en_sw)==0){
    if(ch_status==false){      
      if(id >= 3){
       beep(3);
       lcd.setCursor(0,0);lcd.print(F("Exceed Enroll    "));
       lcd.setCursor(0,1);lcd.print(F("Limit "));lcd.print(id);       
       lcd_msg();
    }
     if(id >= 0 && id < 3){ 
      id++;
      //id_val++;
        lcd.clear();
        lcd.setCursor(0,0);lcd.print(F("PLACE YOUR FINGER   ")); 
        lcd.setCursor(0,1);lcd.print(F("Enrolling Id:       ")); 
        lcd.setCursor(0,2); lcd.print(id); lcd.print(F("  "));   
        
        while(p==-1){
        p=getFingerprintEnroll();
        }
        ch_status=true;
        p=-1;
       }
     }
    else{
        ch_status=false;
        p=-1;
        }
     }
// -------------------------------- //  
  }
}

void password(){                
i=0;a=0;j=0;                                                                
while(keypressed != '#'){                                   
keypressed = myKeypad.getKey();                         
if(keypressed != NO_KEY && keypressed != '#' ){      
lcd.setCursor(j,1);                                
lcd.print("*");
j++;
if(keypressed == code[i]&& i<sizeof(code)){        
a++;                                            
i++;
}
else
a--;                                            
}
}
keypressed = NO_KEY;\
}

void exception_password(){            
i=0;a=0;j=0;                                                           
while(keypressed != '#'){                                  
keypressed = myKeypad.getKey();                         
if(keypressed != NO_KEY && keypressed != '#' ){  
lcd.setCursor(j,1);                          
lcd.print("*");
j++;
if(keypressed == exp_code[i]&& i<sizeof(exp_code)){         
a++;                                              
i++;
}
else
a--;                                      
}
}
keypressed = NO_KEY;\
}

void biometric_check(){        
  lcd.clear();
  lcd.setCursor(0,0);lcd.print(F(" SCAN YOUR FINGER   "));
  while(1){
  if(digitalRead(ver_sw)==0){  
    lcd.setCursor(0,0);lcd.print(F("Verifying Finger "));
    delay(2000);
    finger.getTemplateCount();
    Serial.print(F("Sensor contains ")); Serial.print(finger.templateCount); Serial.println(F(" templates"));
    Serial.println(F("Waiting for valid finger...")); 
    int ID;
    ID=getFingerprintIDez();
    delay(500);         
    if(ID==1){
      digitalWrite(capture,1);;
      Serial.println(F("Match Found With ID"));
      lcd.setCursor(0,1);lcd.print(F("MATCH FOUND USER 1"));
      //delay(1500);lcd.setCursor(0,1);lcd.print(F("               "));
      Serial.println(F("Enter BT"));bt_check();break;     
      }
    else if(ID==2){            
      digitalWrite(capture,1);;
      Serial.println(F("Match Found With ID"));
      lcd.setCursor(0,1);lcd.print(F("MATCH FOUND USER 2"));
      //delay(1500);lcd.setCursor(0,1);lcd.print(F("               ")); 
      Serial.println(F("Enter BT"));bt_check();break;     
      }
      else if(ID==3){
      digitalWrite(capture,1);;
      Serial.println(F("Match Found With ID"));
      lcd.setCursor(0,1);lcd.print(F("MATCH FOUND USER 3"));
      //delay(1500);lcd.setCursor(0,1);lcd.print(F("               "));
      Serial.println(F("Enter BT"));bt_check();break;      
      }
      else{      
      Serial.print(F("Match Not Found "));
      trialcheck ++;
      Serial.println(trialcheck);                  
      lcd.setCursor(0,2);lcd.print(F("UNREGISTERED     "));
      lcd.setCursor(0,3);lcd.print(F("FINGERPRINT      ")); 
      delay(1500);      
      lcd.setCursor(0,2);lcd.print(F("ACCESS DENIED    ")); 
      lcd.setCursor(0,3);lcd.print(F("CAPTURE IMAGE    ")); 
      beep(3); digitalWrite(capture,0);     
      lcd_msg();
      break;
      }
    }
  }
}

/////////////  Enroll   ///////////////////

uint8_t getFingerprintEnroll() {
  //Serial1.print(F("Waiting for valid finger to enroll as #")); Serial1.println(id);
  Serial.print(F("Enrolling ")); Serial.print(id);
  delay(1000);
  while (p != FINGERPRINT_OK) {
    p = finger.getImage();
    switch (p) {
    case FINGERPRINT_OK:
      Serial.println(F("Image taken"));
      break;
    case FINGERPRINT_NOFINGER:
      Serial.println(F("."));
      break;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println(F("Communication error"));
      break;
    case FINGERPRINT_IMAGEFAIL:
      Serial.println(F("Imaging error"));
      break;
    default:
      Serial.println(F("Unknown error"));
      break;
    }
  }

  // OK success!

  p = finger.image2Tz(1);
  switch (p) {
    case FINGERPRINT_OK:
      Serial.println(F("Image converted"));
      break;
    case FINGERPRINT_IMAGEMESS:
      Serial.println(F("Image too messy"));
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println(F("Communication error"));
      return p;
    case FINGERPRINT_FEATUREFAIL:
      Serial.println(F("Could not find fingerprint features"));
      return p;
    case FINGERPRINT_INVALIDIMAGE:
      Serial.println(F("Could not find fingerprint features"));
      return p;
    default:
      Serial.println(F("Unknown error"));
      return p;
  }
  
  
  Serial.print(F("Remove Finger"));
  
  lcd.setCursor(0,0);
  lcd.print(F("Remove Finger     "));
  
  delay(1000);
  
  p = 0;
  while (p != FINGERPRINT_NOFINGER) {
    p = finger.getImage();
  }
  Serial.print(F("ID ")); Serial.println(id);
  p = -1;
  Serial.println(F("Place same finger again"));
//  Serial.print(F("Put Same Finger Again"));
 // lcd.clear();
  lcd.setCursor(0,0);
  lcd.print(F("Put Finger Again   "));
  delay(3000);
  while (p != FINGERPRINT_OK) {
    p = finger.getImage();
    switch (p) {
    case FINGERPRINT_OK:
      Serial.println(F("Image taken"));
      break;
    case FINGERPRINT_NOFINGER:
      Serial.print(F("."));
      break;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println(F("Communication error"));
      break;
    case FINGERPRINT_IMAGEFAIL:
      Serial.println(F("Imaging error"));
      break;
    default:
      Serial.println(F("Unknown error"));
      break;
    }
  }

  // OK success!

  p = finger.image2Tz(2);
  switch (p) {
    case FINGERPRINT_OK:
      Serial.println(F("Image converted"));
      break;
    case FINGERPRINT_IMAGEMESS:
      Serial.println(F("Image too messy"));
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println(F("Communication error"));
      return p;
    case FINGERPRINT_FEATUREFAIL:
      Serial.println(F("Could not find fingerprint features"));
      return p;
    case FINGERPRINT_INVALIDIMAGE:
      Serial.println(F("Could not find fingerprint features"));
      return p;
    default:
      Serial.println(F("Unknown error"));
      return p;
  }
  
  // OK converted!
  Serial.print(F("Creating model for #"));  Serial.println(id);
  
  p = finger.createModel();
  if (p == FINGERPRINT_OK) {
    Serial.println(F("Prints matched!"));
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    Serial.println(F("Communication error"));
    return p;
  } else if (p == FINGERPRINT_ENROLLMISMATCH) {
    Serial.println(F("Fingerprints did not matches"));
    delay(1000);
    Serial.print(F("Enroll Fail"));
    lcd.setCursor(0,0);
    lcd.print(F("FAIL TO ENROLL  "));
    if(id>0) { id--; }
     lcd_msg();
    return p;
  } else {
    Serial.println(F("Unknown error"));
    return p;
  }   
 

//////////////  Enroll End  ///////////////////

//////////////   Verify    ///////////////////

uint8_t getFingerprintID() {
  uint8_t p = finger.getImage();
  switch (p) {
    case FINGERPRINT_OK:
      Serial.println(F("Image taken"));
      lcd.setCursor(0,1);                                
      lcd.print(F("Image Taken"));
      break;
    case FINGERPRINT_NOFINGER:
      Serial.println(F("No finger detected"));
      lcd.setCursor(0,1);                                
      lcd.print(F("NO FINGER      "));
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println(F("Communication error"));
      return p;
    case FINGERPRINT_IMAGEFAIL:
      Serial.println(F("Imaging error"));
      return p;
    default:
      Serial.println(F("Unknown error"));
      return p;
  }

  // OK success!

  p = finger.image2Tz();
  switch (p) {
    case FINGERPRINT_OK:
      Serial.println(F("Image converted"));
      break;
    case FINGERPRINT_IMAGEMESS:
      Serial.println(F("Image too messy"));
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println(F("Communication error"));
      return p;
    case FINGERPRINT_FEATUREFAIL:
      Serial.println(F("Could not find fingerprint features"));
      return p;
    case FINGERPRINT_INVALIDIMAGE:
      Serial.println(F("Could not find fingerprint features"));
      return p;
    default:
      Serial.println(F("Unknown error"));
      return p;
  }
  
  // OK converted!
  p = finger.fingerFastSearch();
  if (p == FINGERPRINT_OK) {
    Serial.println(F("Found a print match!"));
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    Serial.println(F("Communication error"));
    return p;
  } else if (p == FINGERPRINT_NOTFOUND) {
    Serial.println(F("Did not find a match"));
    return p;
  } else {
    Serial.println(F("Unknown error"));
    return p;
  }   
  
 // Serial.print(F("Found ID #")); Serial1.print(finger.fingerID); 
  Serial.print(F(" with confidence of ")); Serial.println(finger.confidence); 

  return finger.fingerID;
}

// returns -1 if failed, otherwise returns ID #
int getFingerprintIDez() {
  uint8_t p = finger.getImage();
  if (p != FINGERPRINT_OK)  return -1;

  p = finger.image2Tz();
  if (p != FINGERPRINT_OK)  return -1;

  p = finger.fingerFastSearch();
  if (p != FINGERPRINT_OK)  return -1;
  
  // found a match!
 // Serial.print(F("Found ID #")); Serial1.print(finger.fingerID); 
  Serial.print(F(" with confidence of ")); Serial.println(finger.confidence);
  return finger.fingerID; 
}
////////////// Verify End ////////////////////

void bt_check(){
lcd.clear();
lcd.setCursor(0,0);lcd.print(F("WAITING FOR      "));
lcd.setCursor(0,1);lcd.print(F("BLUETOOTH CODE"));delay(1500);
while(1){
  while(Serial2.available() == 0);
  Answer = Serial2.readString();
  Serial.println(Answer);
  if(Answer == "2468"){
     trialcheck=0;digitalWrite(capture,1);;
     lcd.setCursor(0,0);lcd.print(F("BLUETOOTH CODE VALID"));     
     lcd.setCursor(0,1);lcd.print(F("UNLOCK SUCCESS "));
     serv_act();Serial.println(trialcheck);
     Answer="\0";lcd_msg();break;
  }
  else{
  trialcheck++;
  Serial.println("INVALID");
  lcd.setCursor(0,2);lcd.print(F("INVALID CODE     "));
  lcd.setCursor(0,3);lcd.print(F("                 "));
      delay(1500);
  lcd.setCursor(0,2);lcd.print(F("ACCESS DENIED    ")); 
  lcd.setCursor(0,3);lcd.print(F("CAPTURE IMAGE    ")); 
  beep(3);digitalWrite(capture,0);
  Answer="\0";
  break;
  }
}
}

void serv_act() {
while(pos<90){
  myservo.write(pos++);  
  delay(15);}
  delay(3000);
  while(pos>0){
  myservo.write(pos--);
  Serial.println(pos);
  delay(15);}  
}
